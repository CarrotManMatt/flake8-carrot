[build-system]
build-backend = "hatchling.build"
requires = ["Pydowndoc[bin]>=2.1.1", "hatch-vcs", "hatchling"]


[dependency-groups]
dev = [
    "astpretty>=3.0",
    { include-group = "lint-format" },
    { include-group = "pre-commit" },
    { include-group = "test" },
    { include-group = "type-check" },
]
lint-format = ["ruff>=0.8"]
pre-commit = ["pre-commit"]
test = ["pytest"]
type-check = ["mypy>=1.12", { include-group = "test" }]


[project]
authors = [{ name = "Matt Norton", email = "matt@carrotmanmatt.com" }]
classifiers = [
    "Development Status :: 1 - Planning",
    "Environment :: Console",
    "Framework :: Flake8",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Typing :: Typed",
]
dependencies = ["flake8>=6", "typed_classproperties>=1.3"]
description = "A plugin for Flake8; Finding opinionated problems in your Python code. Ensures that your Python code adhere's to CarrotManMatt's style guide."
dynamic = ["readme", "version"]
keywords = ["flake8", "flake8-plugin", "linter", "python", "static analysis"]
license = "Apache-2.0"
license-files = ["LICENSE"]
name = "flake8-carrot"
requires-python = ">=3.12"

[project.urls]
Issues = "https://github.com/CarrotManMatt/flake8-carrot/issues"
Repository = "https://github.com/CarrotManMatt/flake8-carrot"

[project.entry-points."flake8.extension"]
CAR = "flake8_carrot:CarrotPlugin"
TXB = "flake8_carrot:TeXBotPlugin"


[tool.hatch.build]
only-packages = true

[tool.hatch.metadata.hooks]
downdoc-readme = { path = "README.adoc" }

[tool.hatch.version]
raw-options = { local_scheme = "no-local-version", version_scheme = "python-simplified-semver" }
source = "vcs"


[tool.pytest.ini_options]
filterwarnings = ["ignore:'audioop':DeprecationWarning"]


[tool.mypy]
check_untyped_defs = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
enable_error_code = [
    "deprecated",
    "explicit-override",
    "ignore-without-code",
    "mutable-override",
    "narrowed-type-not-subtype",
    "possibly-undefined",
    "redundant-expr",
    "redundant-self",
    "truthy-bool",
    "truthy-iterable",
    "unused-awaitable",
]
exclude = ["examples/"]
extra_checks = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["astpretty"]

[tool.ruff]
indent-width = 4
line-length = 95
output-format = "concise"

[tool.ruff.lint]
external = ["CAR", "TXB"]
ignore = [
    "C90",
    "COM812",
    "COM819",
    "CPY",
    "D206",
    "D212",
    "FA",
    "ICN001",
    "INP001",
    "ISC001",
    "ISC002",
    "N806",
    "PIE808",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "S603",
    "SIM910",
    "TD002",
    "TD003",
    "W191",
]
select = ["ALL", "D204", "D213", "D401"]
task-tags = ["BUG", "DONE", "FIXME", "HACK", "IDEA", "ISSUE", "NOBUG", "NOTE", "REQ", "TODO"]

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["abc", "re"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true
parametrize-values-type = "tuple"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = []
quote-annotations = true
strict = true

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "typed_classproperties.cached_classproperty",
    "typed_classproperties.classproperty",
]
extend-ignore-names = ["BROKEN_*_MESSAGE", "INVALID_*_MESSAGE", "NO_*_MESSAGE"]

[tool.ruff.lint.per-file-ignores]
"tests/**/test_*.py" = ["S101"]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 95

[tool.ruff.lint.pydocstyle]
convention = "google"
property-decorators = [
    "typed_classproperties.cached_classproperty",
    "typed_classproperties.classproperty",
]

[tool.ruff.lint.pylint]
allow-magic-value-types = ["bytes", "int", "str"]
max-args = 7
max-branches = 19
max-returns = 10

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true


[tool.uv]
default-groups = ["dev"]
no-binary-package = ["flake8-carrot"]
no-build = true
package = true
required-version = ">=0.5.21"
trusted-publishing = "always"

[[tool.uv.index]]
explicit = true
name = "Test-PyPI"
publish-url = "https://test.pypi.org/legacy/"
url = "https://test.pypi.org/simple/"
